/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOrganizationTypeArgs } from "./CreateOrganizationTypeArgs";
import { UpdateOrganizationTypeArgs } from "./UpdateOrganizationTypeArgs";
import { DeleteOrganizationTypeArgs } from "./DeleteOrganizationTypeArgs";
import { OrganizationTypeFindManyArgs } from "./OrganizationTypeFindManyArgs";
import { OrganizationTypeFindUniqueArgs } from "./OrganizationTypeFindUniqueArgs";
import { OrganizationType } from "./OrganizationType";
import { OrganizationTypeService } from "../organizationType.service";

@graphql.Resolver(() => OrganizationType)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class OrganizationTypeResolverBase {
  constructor(
    protected readonly service: OrganizationTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OrganizationType",
    action: "read",
    possession: "any",
  })
  async _organizationTypesMeta(
    @graphql.Args() args: OrganizationTypeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OrganizationType])
  @nestAccessControl.UseRoles({
    resource: "OrganizationType",
    action: "read",
    possession: "any",
  })
  async organizationTypes(
    @graphql.Args() args: OrganizationTypeFindManyArgs
  ): Promise<OrganizationType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OrganizationType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OrganizationType",
    action: "read",
    possession: "own",
  })
  async organizationType(
    @graphql.Args() args: OrganizationTypeFindUniqueArgs
  ): Promise<OrganizationType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrganizationType)
  @nestAccessControl.UseRoles({
    resource: "OrganizationType",
    action: "create",
    possession: "any",
  })
  async createOrganizationType(
    @graphql.Args() args: CreateOrganizationTypeArgs
  ): Promise<OrganizationType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrganizationType)
  @nestAccessControl.UseRoles({
    resource: "OrganizationType",
    action: "update",
    possession: "any",
  })
  async updateOrganizationType(
    @graphql.Args() args: UpdateOrganizationTypeArgs
  ): Promise<OrganizationType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationType)
  @nestAccessControl.UseRoles({
    resource: "OrganizationType",
    action: "delete",
    possession: "any",
  })
  async deleteOrganizationType(
    @graphql.Args() args: DeleteOrganizationTypeArgs
  ): Promise<OrganizationType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

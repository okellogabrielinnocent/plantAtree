/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTreeTypeArgs } from "./CreateTreeTypeArgs";
import { UpdateTreeTypeArgs } from "./UpdateTreeTypeArgs";
import { DeleteTreeTypeArgs } from "./DeleteTreeTypeArgs";
import { TreeTypeFindManyArgs } from "./TreeTypeFindManyArgs";
import { TreeTypeFindUniqueArgs } from "./TreeTypeFindUniqueArgs";
import { TreeType } from "./TreeType";
import { TreeFindManyArgs } from "../../tree/base/TreeFindManyArgs";
import { Tree } from "../../tree/base/Tree";
import { TreeTypeService } from "../treeType.service";

@graphql.Resolver(() => TreeType)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TreeTypeResolverBase {
  constructor(
    protected readonly service: TreeTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TreeType",
    action: "read",
    possession: "any",
  })
  async _treeTypesMeta(
    @graphql.Args() args: TreeTypeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TreeType])
  @nestAccessControl.UseRoles({
    resource: "TreeType",
    action: "read",
    possession: "any",
  })
  async treeTypes(
    @graphql.Args() args: TreeTypeFindManyArgs
  ): Promise<TreeType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TreeType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TreeType",
    action: "read",
    possession: "own",
  })
  async treeType(
    @graphql.Args() args: TreeTypeFindUniqueArgs
  ): Promise<TreeType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TreeType)
  @nestAccessControl.UseRoles({
    resource: "TreeType",
    action: "create",
    possession: "any",
  })
  async createTreeType(
    @graphql.Args() args: CreateTreeTypeArgs
  ): Promise<TreeType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TreeType)
  @nestAccessControl.UseRoles({
    resource: "TreeType",
    action: "update",
    possession: "any",
  })
  async updateTreeType(
    @graphql.Args() args: UpdateTreeTypeArgs
  ): Promise<TreeType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TreeType)
  @nestAccessControl.UseRoles({
    resource: "TreeType",
    action: "delete",
    possession: "any",
  })
  async deleteTreeType(
    @graphql.Args() args: DeleteTreeTypeArgs
  ): Promise<TreeType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Tree])
  @nestAccessControl.UseRoles({
    resource: "Tree",
    action: "read",
    possession: "any",
  })
  async trees(
    @graphql.Parent() parent: TreeType,
    @graphql.Args() args: TreeFindManyArgs
  ): Promise<Tree[]> {
    const results = await this.service.findTrees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

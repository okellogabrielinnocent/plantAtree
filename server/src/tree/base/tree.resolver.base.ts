/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTreeArgs } from "./CreateTreeArgs";
import { UpdateTreeArgs } from "./UpdateTreeArgs";
import { DeleteTreeArgs } from "./DeleteTreeArgs";
import { TreeFindManyArgs } from "./TreeFindManyArgs";
import { TreeFindUniqueArgs } from "./TreeFindUniqueArgs";
import { Tree } from "./Tree";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { Campaign } from "../../campaign/base/Campaign";
import { TreeCondition } from "../../treeCondition/base/TreeCondition";
import { TreeType } from "../../treeType/base/TreeType";
import { TreeService } from "../tree.service";

@graphql.Resolver(() => Tree)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TreeResolverBase {
  constructor(
    protected readonly service: TreeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tree",
    action: "read",
    possession: "any",
  })
  async _treesMeta(
    @graphql.Args() args: TreeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tree])
  @nestAccessControl.UseRoles({
    resource: "Tree",
    action: "read",
    possession: "any",
  })
  async trees(@graphql.Args() args: TreeFindManyArgs): Promise<Tree[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tree, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tree",
    action: "read",
    possession: "own",
  })
  async tree(@graphql.Args() args: TreeFindUniqueArgs): Promise<Tree | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tree)
  @nestAccessControl.UseRoles({
    resource: "Tree",
    action: "create",
    possession: "any",
  })
  async createTree(@graphql.Args() args: CreateTreeArgs): Promise<Tree> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        campaign: args.data.campaign
          ? {
              connect: args.data.campaign,
            }
          : undefined,

        condition: args.data.condition
          ? {
              connect: args.data.condition,
            }
          : undefined,

        treeType: {
          connect: args.data.treeType,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tree)
  @nestAccessControl.UseRoles({
    resource: "Tree",
    action: "update",
    possession: "any",
  })
  async updateTree(@graphql.Args() args: UpdateTreeArgs): Promise<Tree | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          campaign: args.data.campaign
            ? {
                connect: args.data.campaign,
              }
            : undefined,

          condition: args.data.condition
            ? {
                connect: args.data.condition,
              }
            : undefined,

          treeType: {
            connect: args.data.treeType,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tree)
  @nestAccessControl.UseRoles({
    resource: "Tree",
    action: "delete",
    possession: "any",
  })
  async deleteTree(@graphql.Args() args: DeleteTreeArgs): Promise<Tree | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async adaptors(
    @graphql.Parent() parent: Tree,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findAdaptors(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async plantedBy(
    @graphql.Parent() parent: Tree,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findPlantedBy(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Campaign, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "read",
    possession: "any",
  })
  async campaign(@graphql.Parent() parent: Tree): Promise<Campaign | null> {
    const result = await this.service.getCampaign(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TreeCondition, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TreeCondition",
    action: "read",
    possession: "any",
  })
  async condition(
    @graphql.Parent() parent: Tree
  ): Promise<TreeCondition | null> {
    const result = await this.service.getCondition(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TreeType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TreeType",
    action: "read",
    possession: "any",
  })
  async treeType(@graphql.Parent() parent: Tree): Promise<TreeType | null> {
    const result = await this.service.getTreeType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
